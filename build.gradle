/*
 * GPLv3 License
 *  Copyright (c) SikuliCef by waicool20
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    ext.kotlin_version = '1.1.1'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

apply plugin: 'java'
apply plugin: 'kotlin'

group 'com.waicool20'
version '1.0'

sourceCompatibility = 1.8

def library_root = "java-cef-framebuffer/binary_distrib/" + getOSString()
def library_res_dir = "./java-cef-res/"

task copyJcefLibs(type: Copy) {
    from(library_root + "/bin/lib/" + getOSString()) {
        include "*/**"
    }
    into(library_res_dir + "java-cef-res")
}

task copyJogampLibs(type: Copy) {
    from(library_root + "/bin/natives/") {
        include "*/**"
    }
    into(library_res_dir + "natives/" )
}

defaultTasks 'build'
processResources.dependsOn([copyJcefLibs, copyJogampLibs])
build.finalizedBy(shadowJar)
jar.enabled = false

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    /* kotlin */
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.14"

    /* sikulix */
    compile(group: "com.sikulix", name: "sikulixapi", version: "1.1.1-SNAPSHOT") {
        exclude group: "com.sikulix"
        exclude module: 'jadb'
    }
    compile(group: "com.sikulix", name: "sikulixlibslux", version: "1.1.1-SNAPSHOT")
    compile(group: "com.sikulix", name: "sikulixlibsmac", version: "1.1.1-SNAPSHOT")
    compile(group: "com.sikulix", name: "sikulixlibswin", version: "1.1.1-SNAPSHOT")

    /* java-cef libs */

    compile(files(library_root + "/bin/gluegen-rt.jar"))
    runtime(files(library_root + "/bin/gluegen-rt-natives-" + getJogampVersion() + ".jar"))
    compile(files(library_root + "/bin/jcef.jar"))
    compile(files(library_root + "/bin/jogl-all.jar"))
    runtime(files(library_root + "/bin/jogl-all-natives-" + getJogampVersion() + ".jar"))

    /* logging */
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.8'

    /*----- Testing ------*/

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

sourceSets {
    main {
        resources {
            srcDir library_res_dir
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.waicool20.sikulicef.SikuliCefKt'
    }
}

static String getOSString() {
    def osArch = System.getProperty("os.arch").contains("64") ? "64" : "32"
    if (isWindows()) {
        return "win" + osArch
    } else if (isLinux()) {
        return "linux" + osArch
    } else if (isMac()) {
        return "macosx64"
    } else {
        return "Unsupported OS"
    }
}

static Boolean isWindows() {
    return System.getProperty("os.name").toLowerCase().contains("window")
}

static Boolean isLinux() {
    return System.getProperty("os.name").toLowerCase().contains("linux")
}

static Boolean isMac() {
    return System.getProperty("os.name").toLowerCase().contains("mac")
}

static String getJogampVersion() {
    def library = ""
    if (isWindows()) {
        library += "windows-"
    } else if (isLinux()) {
        library += "linux-"
    } else if (isMac()) {
        return "macosx-univeral"
    }
    return library + System.getProperty("os.arch")
}
