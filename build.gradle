/*
 * GPLv3 License
 *  Copyright (c) SikuliCef by waicool20
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    ext.kotlin_version = '1.1.1'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

apply plugin: 'java'
apply plugin: 'kotlin'

group 'com.waicool20'
version '1.0'

sourceCompatibility = 1.8

def binaryDistribDir = "java-cef-framebuffer/binary_distrib/" + getOSString()
def libraryResDir = "src/resources/"

task copyBinaryDistrib(type: Copy) {
    from(binaryDistribDir + "/bin/") {
        exclude("**/tests")
        exclude("**/jcef-tests.jar")
        rename('(.*).jar', '$1.jarpak')
    }
    into libraryResDir + "java-cef-res"
}

task copyBinaryDistribBinaries(type: Copy) {
    from(fileTree(binaryDistribDir + "/bin/").files) {
        exclude("**/tests")
        include("**/icudtl.dat")
        include("**/natives_blob.bin")
        include("**/snapshot_blob.bin")
    }
    into libraryResDir + "java-cef-res/binaries"
}

task stripSymbols(type: Exec) {
    setExecutable("find")
    setArgs([".", "-name", "libcef.so", "-exec", "strip", "{}", ";"])
    setWorkingDir(libraryResDir)
    setIgnoreExitValue(true)
}

defaultTasks 'build'
processResources.dependsOn(copyBinaryDistrib)
if (isLinux()) processResources.dependsOn(stripSymbols, copyBinaryDistribBinaries)
build.finalizedBy(shadowJar)
jar.enabled = false

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    /* kotlin */
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.14"

    /* sikulix */
    compile(group: "com.sikulix", name: "sikulixapi", version: "1.1.1-SNAPSHOT") {
        exclude group: "com.sikulix"
        exclude module: 'jadb'
    }
    if (isLinux()) compile(group: "com.sikulix", name: "sikulixlibslux", version: "1.1.1-SNAPSHOT")
    if (isMac()) compile(group: "com.sikulix", name: "sikulixlibsmac", version: "1.1.1-SNAPSHOT")
    if (isWindows()) compile(group: "com.sikulix", name: "sikulixlibswin", version: "1.1.1-SNAPSHOT")

    /* java-cef libs */

    compileOnly(files(getJarLibraryDir(binaryDistribDir) + "gluegen-rt.jar"))
    compileOnly(files(getJarLibraryDir(binaryDistribDir) + "gluegen-rt-natives-" + getJogampVersion() + ".jar"))
    compileOnly(files(getJarLibraryDir(binaryDistribDir) + "jcef.jar"))
    compileOnly(files(getJarLibraryDir(binaryDistribDir) + "jogl-all.jar"))
    compileOnly(files(getJarLibraryDir(binaryDistribDir) + "jogl-all-natives-" + getJogampVersion() + ".jar"))

    /* logging */
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    /*----- Testing ------*/

    testCompile group: 'junit', name: 'junit', version: '4.11'

    /* logging */
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    /* java-cef libs */
    testCompileOnly(files(getJarLibraryDir(binaryDistribDir) + "gluegen-rt.jar"))
    testCompileOnly(files(getJarLibraryDir(binaryDistribDir) + "gluegen-rt-natives-" + getJogampVersion() + ".jar"))
    testCompileOnly(files(getJarLibraryDir(binaryDistribDir) + "jcef.jar"))
    testCompileOnly(files(getJarLibraryDir(binaryDistribDir) + "jogl-all.jar"))
    testCompileOnly(files(getJarLibraryDir(binaryDistribDir) + "jogl-all-natives-" + getJogampVersion() + ".jar"))
}

sourceSets {
    main.resources {
        srcDir libraryResDir
    }
    test.resources {
        srcDir libraryResDir
    }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

task testJar(type: ShadowJar) {
    classifier 'test'
    from sourceSets.main.output.classesDir
    from sourceSets.test.output
    configurations = [project.configurations.testRuntime]
    manifest {
        attributes 'Main-Class': 'com.waicool20.sikulicef.tests.SikuliCefTestKt'
    }
}

static String getOSString() {
    def osArch = System.getProperty("os.arch").contains("64") ? "64" : "32"
    if (isWindows()) {
        return "win" + osArch
    } else if (isLinux()) {
        return "linux" + osArch
    } else if (isMac()) {
        return "macosx64"
    } else {
        return "Unsupported OS"
    }
}

static Boolean isWindows() {
    return System.getProperty("os.name").toLowerCase().contains("window")
}

static Boolean isLinux() {
    return System.getProperty("os.name").toLowerCase().contains("linux")
}

static Boolean isMac() {
    return System.getProperty("os.name").toLowerCase().contains("mac")
}

static String getJogampVersion() {
    def library = ""
    if (isWindows()) {
        library += "windows-"
    } else if (isLinux()) {
        library += "linux-"
    } else if (isMac()) {
        return "macosx-univeral"
    }
    return library + System.getProperty("os.arch")
}

static String getJarLibraryDir(String binaryDistribDir) {
    if (isWindows() || isLinux()) {
        return binaryDistribDir + "/bin/"
    } else if (isMac()) {
        return binaryDistribDir + "/bin/jcef_app.app/Contents/Java/"
    }
    return ""
}
